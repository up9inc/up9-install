AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyPairName:
    Type: String
  PassiveTapperImage:
    Type: String
    Default: gcr.io/up9-docker-hub/passive-tapper/master:latest
  SocksDnsNamespaceName:
    Type: String
    Default: socks
  PassiveTapperPort:
    Type: Number
    Default: 25111
Mappings:
  RegionMap:
    us-east-2:
      ImageId: ami-044bf85e844eddde5
    us-east-1:
      ImageId: ami-00f69adbdc780866c
    us-west-1:
      ImageId: ami-014ee82610857fa9a
    us-west-2:
      ImageId: ami-088dbc54f17f8a1a2
    ap-south-1:
      ImageId: ami-0a03968949ee4e012
    ap-northeast-2:
      ImageId: ami-0750fd52026129ec6
    ap-southeast-1:
      ImageId: ami-0689726e1a700ed66
    ap-southeast-2:
      ImageId: ami-0e6b68880cc94cf09
    ap-northeast-1:
      ImageId: ami-00e177b8d879d5d3f
    ca-central-1:
      ImageId: ami-00f6d6e2711b7adbe
    eu-central-1:
      ImageId: ami-0fe4cfe8d04ec091e
    eu-west-1:
      ImageId: ami-09cec0d91e6d220ea
    eu-west-2:
      ImageId: ami-03ec263c71e44528d
    eu-west-3:
      ImageId: ami-0b700aef0f223def9
    eu-north-1:
      ImageId: ami-0639f978e5b88a840
    sa-east-1:
      ImageId: ami-05b1add1a0c31be07
    # ap-east-1
    # ap-northeast-3
    # me-south-1
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
  Subnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'Vpc'
  SecondaryRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'SecondaryRouteTable'
  SubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'SecondaryRouteTable'
      SubnetId: !Ref 'Subnet0'
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'SecondaryRouteTable'
      SubnetId: !Ref 'Subnet1'
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'SecondaryRouteTable'
      SubnetId: !Ref 'Subnet2'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow load balancer to accept HTTP
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: HTTP
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: '0.0.0.0/0'
          Description: HTTP
          FromPort: 873
          IpProtocol: tcp
          ToPort: 873
        - CidrIpv6: '::/0'
          Description: HTTP
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIpv6: '::/0'
          Description: HTTP
          FromPort: 873
          IpProtocol: tcp
          ToPort: 873
      VpcId: !Ref 'Vpc'
  ECSCluster:
    Type: AWS::ECS::Cluster
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
                         'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
                         'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
  ECSInstance1:
    Type: AWS::EC2::Instance
    Properties:
      EbsOptimized: true
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - 'ImageId'
      InstanceType: m5a.xlarge
      KeyName: !Ref 'KeyPairName'
      Monitoring: true
      SecurityGroupIds:
        - !Ref 'InstanceSecurityGroup'
      SubnetId: !Ref 'Subnet0'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE=true >> /etc/ecs/ecs.config
  ECSInstance2:
    Type: AWS::EC2::Instance
    Properties:
      EbsOptimized: true
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - 'ImageId'
      InstanceType: m5a.xlarge
      KeyName: !Ref 'KeyPairName'
      Monitoring: true
      SecurityGroupIds:
        - !Ref 'InstanceSecurityGroup'
      SubnetId: !Ref 'Subnet0'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE=true >> /etc/ecs/ecs.config
  ECSInstance3:
    Type: AWS::EC2::Instance
    Properties:
      EbsOptimized: true
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - 'ImageId'
      InstanceType: m5a.xlarge
      KeyName: !Ref 'KeyPairName'
      Monitoring: true
      SecurityGroupIds:
        - !Ref 'InstanceSecurityGroup'
      SubnetId: !Ref 'Subnet0'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE=true >> /etc/ecs/ecs.config
  ECSInstance4:
    Type: AWS::EC2::Instance
    Properties:
      EbsOptimized: true
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - 'ImageId'
      InstanceType: m5a.xlarge
      KeyName: !Ref 'KeyPairName'
      Monitoring: true
      SecurityGroupIds:
        - !Ref 'InstanceSecurityGroup'
      SubnetId: !Ref 'Subnet0'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE=true >> /etc/ecs/ecs.config
  ECSInstance5:
    Type: AWS::EC2::Instance
    Properties:
      EbsOptimized: true
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - 'ImageId'
      InstanceType: m5a.xlarge
      KeyName: !Ref 'KeyPairName'
      Monitoring: true
      SecurityGroupIds:
        - !Ref 'InstanceSecurityGroup'
      SubnetId: !Ref 'Subnet0'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE=true >> /etc/ecs/ecs.config
  SocksDnsNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref 'SocksDnsNamespaceName'
      Vpc: !Ref 'Vpc'
  SocksSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow trdemo microservices to communicate
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      VpcId: !Ref 'Vpc'
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow load balancer to accept HTTP
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: '::/0'
          Description: HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref 'Vpc'
  FrontendClientServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: front-end
  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref 'LoadBalancerSecurityGroup'
      Subnets:
        - !Ref 'Subnet0'
        - !Ref 'Subnet1'
      Type: application
  SocksTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc
  SocksListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'SocksTargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'FrontendLoadBalancer'
      Port: 80
      Protocol: HTTP
  FrontendClientTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: front-end
          Image: gcr.io/up9-docker-hub/demos/socks/front-end
          Memory: '512'
          PortMappings:
            - ContainerPort: 8079
        - Name: passive-tapper
          Image: gcr.io/up9-docker-hub/passive-tapper/master:latest
          Memory: '500'
          Environment:
            - Name: APP_PORTS
              Value: 8079
            - Name: WEB_SOCKET_PORT
              Value: 25111
  FrontendService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: front-end
          ContainerPort: 8079
          TargetGroupArn: !Ref 'SocksTargetGroup'
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - FrontendClientServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'FrontendClientTaskDefinition'

  PaymentServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: payment
  PaymentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: payment
          Image: weaveworksdemos/payment:0.4.3
          Memory: '512'
          PortMappings:
            - ContainerPort: 80
        - Name: passive-tapper
          Image: gcr.io/up9-docker-hub/passive-tapper/master:latest
          Memory: '500'
          Environment:
            - Name: APP_PORTS
              Value: 80
            - Name: WEB_SOCKET_PORT
              Value: 25111
  PaymentService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - PaymentServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'PaymentTaskDefinition'

  OrdersServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: orders
  OrdersTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: orders
          Image: weaveworksdemos/orders:0.4.7
          Memory: '512'
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: ZIPKIN
              Value: zipkin.jaeger.svc.cluster.local
            - Name: JAVA_OPTS
              Value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        - Name: passive-tapper
          Image: gcr.io/up9-docker-hub/passive-tapper/master:latest
          Memory: '500'
          Environment:
            - Name: APP_PORTS
              Value: 80
            - Name: WEB_SOCKET_PORT
              Value: 25111
  OrdersService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - OrdersServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'OrdersTaskDefinition'

  CartsServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: carts
  CartsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: carts
          Image: gcr.io/up9-docker-hub/demos/socks/carts:latest
          Memory: '512'
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: ZIPKIN
              Value: zipkin.jaeger.svc.cluster.local
            - Name: JAVA_OPTS
              Value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        - Name: passive-tapper
          Image: gcr.io/up9-docker-hub/passive-tapper/master:latest
          Memory: '500'
          Environment:
            - Name: APP_PORTS
              Value: 80
            - Name: WEB_SOCKET_PORT
              Value: 25111
  CartsService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - CartsServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'CartsTaskDefinition'

  CartsDbServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: carts-db
  CartsDbTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: carts-db
          Image: mongo
          Memory: '512'
          PortMappings:
            - ContainerPort: 27017
  CartsDbService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - CartsDbServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'CartsDbTaskDefinition'

  CatalogueServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: catalogue
  CatalogueTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: catalogue
          Image: gcr.io/up9-docker-hub/demos/socks/catalogue:latest
          Memory: '512'
          PortMappings:
            - ContainerPort: 80
        - Name: passive-tapper
          Image: gcr.io/up9-docker-hub/passive-tapper/master:latest
          Memory: '500'
          Environment:
            - Name: APP_PORTS
              Value: 80
            - Name: WEB_SOCKET_PORT
              Value: 25111
  CatalogueService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - CatalogueServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'CatalogueTaskDefinition'

  CatalogueDbServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: catalogue-db
  CatalogueDbTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: catalogue-db
          Image: weaveworksdemos/catalogue-db:0.3.0
          Memory: '512'
          PortMappings:
            - ContainerPort: 3306
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: aa1234
            - Name: MYSQL_DATABASE
              Value: socksdb
  CatalogueDbService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - CatalogueDbServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'CatalogueDbTaskDefinition'

  UserServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: user
  UserTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: user
          Image: weaveworksdemos/user:0.4.7
          Memory: '512'
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: mongo
              Value: user-db.socks:27017
            - Name: MONGO_HOST
              Value: user-db.socks
        - Name: passive-tapper
          Image: gcr.io/up9-docker-hub/passive-tapper/master:latest
          Memory: '500'
          Environment:
            - Name: APP_PORTS
              Value: 80
            - Name: WEB_SOCKET_PORT
              Value: 25111
  UserService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - UserServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'UserTaskDefinition'

  UserDbServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: user-db
  UserDbTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: user-db
          Image: weaveworksdemos/user-db:0.3.0
          Memory: '512'
          PortMappings:
            - ContainerPort: 27017
  UserDbService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - UserDbServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'UserDbTaskDefinition'
  ShippingServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: shipping
  ShippingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: shipping
          Image: weaveworksdemos/shipping:0.4.8
          Memory: '512'
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: ZIPKIN
              Value: zipkin.jaeger.svc.cluster.local
            - Name: JAVA_OPTS
              Value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        - Name: passive-tapper
          Image: gcr.io/up9-docker-hub/passive-tapper/master:latest
          Memory: '500'
          Environment:
            - Name: APP_PORTS
              Value: 80
            - Name: WEB_SOCKET_PORT
              Value: 25111
  ShippingService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - ShippingServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'ShippingTaskDefinition'

  SessionDbServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: session-db
  SessionDbTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: session-db
          Image: redis:alpine
          Memory: '512'
          PortMappings:
            - ContainerPort: 6379
  SessionDbService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - SessionDbServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'SessionDbTaskDefinition'

  RabbitMqServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: rabbitmq
  RabbitMqExporterServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: !Ref 'SocksDnsNamespace'
      Name: rabbitmq-exporter
  RabbitMqTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: rabbitmq
          Image: rabbitmq:3.6.8-management
          Memory: '512'
          PortMappings:
            - ContainerPort: 15672
            - ContainerPort: 5672
        - Name: rabbitmq-exporter
          Image: kbudde/rabbitmq-exporter
          Memory: '512'
          PortMappings:
            - ContainerPort: 9090
  RabbitMqService:
    Type: AWS::ECS::Service
    DependsOn:
      - SocksListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref 'Subnet0'
          SecurityGroups:
            - !Ref 'SocksSecurityGroup'
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - RabbitMqServiceDiscovery
            - Arn
      TaskDefinition: !Ref 'RabbitMqTaskDefinition'